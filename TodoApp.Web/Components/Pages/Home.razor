@page "/"
@rendermode InteractiveServer

@using TodoApp.Web.Components.Modals

@inject TodosClient TodosClient
@inject TodoStateService TodoState
@inject UserService UserService
@inject ILogger<Home> Logger
@implements IDisposable

<div class="container mx-auto px-4">
    @if (filteredTodos == null)
    {
        <p class="text-gray-600">Loading todos...</p>
    }
    else if (!filteredTodos.Any())
    {
        <p class="text-gray-600">No todos found.</p>
    }
    else
    {
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            @foreach (var todo in filteredTodos)
            {
                <TodoSummaryComponent Todo="todo" OnTodoClicked="HandleTodoClicked" />
            }
        </div>
    }
</div>

<WelcomeModal @bind-IsVisible="isWelcomeModalVisible" OnLoginSuccess="RefreshTodos" />
<TodoDetailModal @bind-IsVisible="isTodoDetailModalVisible" Todo="selectedTodo" OnTodoUpdated="HandleTodoUpdated" OnTodoDeleted="HandleTodoDeleted" />

@code 
{
    private TodoSummaryDto[]? todos;
    private TodoSummaryDto[]? filteredTodos;
    private bool isWelcomeModalVisible = false;
    private bool isCreateTodoModalVisible = false;
    private bool isTodoDetailModalVisible = false;
    private TodoDto? selectedTodo;
    protected override async Task OnInitializedAsync()
    {
        UserService.OnUserStateChanged += HandleUserStateChanged;
        TodoState.OnChange += StateHasChanged;
        TodoState.OnFilterChange += ApplyFilters;
        TodoState.OnTodoCreated += HandleTodoCreated;
        await RefreshTodos();
    }

    private async Task RefreshTodos()
    {
        if (UserService.IsLoggedIn)
        {
            todos = await TodosClient.GetAllTodosAsync();
            TodoState.UpdateTodos(todos);
            await ApplyFilters();
            isWelcomeModalVisible = false;
        }
        else
        {
            ResetTodos();
            isWelcomeModalVisible = true;
        }
        StateHasChanged();
    }

    private async Task HandleTodoClicked(TodoSummaryDto todo)
    {
        try
        {
            selectedTodo = await TodosClient.GetTodoAsync(todo.Id);
            Logger.LogInformation($"Clicked on {todo.Title}. IsCompleteProperty is {todo.IsCompleted} ");
            isTodoDetailModalVisible = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error fetching todo details");
        }
    }
    private async Task HandleTodoUpdated()
    {
        await RefreshTodos();
        isTodoDetailModalVisible = false;
    }

    private async Task HandleTodoDeleted()
    {
        await RefreshTodos();
        isTodoDetailModalVisible = false;
    }

    private async Task HandleTodoCreated()
    {
        await RefreshTodos();
    }

    private void ResetTodos()
    {
        todos = null;
        filteredTodos = null;
        TodoState.UpdateTodos(null);
    }

    private async void HandleUserStateChanged()
    {
        await RefreshTodos();
        StateHasChanged();
    }

    private Task ApplyFilters()
    {
        Logger.LogInformation("ApplyFilters called");
        Logger.LogInformation("Current SelectedTag: {SelectedTag}", TodoState.SelectedTag);
        
        filteredTodos = todos;

        // Apply timeframe filter
        filteredTodos = TodoState.SelectedTimeframe switch
        {
            "today" => filteredTodos?.Where(t => t.TodoTimeFrame == TimeFrame.Today).ToArray(),
            "next7days" => filteredTodos?.Where(t => t.TodoTimeFrame == TimeFrame.NextSevenDays).ToArray(),
            "future" => filteredTodos?.Where(t => t.TodoTimeFrame == TimeFrame.Future).ToArray(),
            _ => filteredTodos
        };

        // Apply tag filter
        if (!string.IsNullOrEmpty(TodoState.SelectedTag))
        {
            filteredTodos = filteredTodos?.Where(t => t.Tags != null && t.Tags.Any(tag => tag.Name == TodoState.SelectedTag)).ToArray();
        }

        // Apply view filter
        if (TodoState.CurrentView == "completed")
        {
            filteredTodos = filteredTodos?.Where(t => t.IsCompleted).ToArray();
        }
        else if (TodoState.CurrentView == "overdue")
        {
            filteredTodos = filteredTodos?.Where(t => t.DueDate < DateTime.Today && !t.IsCompleted).ToArray();
        }
        
        // Always apply due date ordering if it's the current view
        if (TodoState.CurrentView == "duedate")
        {
            filteredTodos = TodoState.IsDueDateAscending
                ? filteredTodos?.OrderBy(t => t.DueDate).ToArray()
                : filteredTodos?.OrderByDescending(t => t.DueDate).ToArray();
        }

        Logger.LogInformation($"Filtered todos count: {filteredTodos?.Length ?? 0}");
        StateHasChanged();
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        UserService.OnUserStateChanged -= HandleUserStateChanged;
        TodoState.OnChange -= StateHasChanged;
        TodoState.OnFilterChange -= ApplyFilters;
        TodoState.OnTodoCreated -= HandleTodoCreated;
    }
}