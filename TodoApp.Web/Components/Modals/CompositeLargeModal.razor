@if (IsVisible)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 z-40 flex justify-center items-center p-4">
        <div class="font-secondary bg-[#EEE2DC] rounded-lg shadow-xl z-50 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
            <div class="flex justify-between items-center p-6 border-b">
                <h2 class="text-2xl font-bold">@Title</h2>
                <button @onclick="Close" class="text-[#AC3B61] hover:text-[#C15B7B] transition-colors duration-200">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            <div class="p-6">
                @ChildContent
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public string Title { get; set; } = "Modal";
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private async Task Close()
    {
        await IsVisibleChanged.InvokeAsync(false);
        await OnClose.InvokeAsync();
    }
}