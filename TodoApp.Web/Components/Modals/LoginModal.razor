@inject UserService UserService

<CompositeModal @bind-IsVisible="IsVisible" Title="Login">
    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" class="font-secondary">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-[#AC3B61] mb-4" />

        <div class="mb-6">
            <label for="username" class="block text-[#123C69] text-sm font-bold mb-2">Username</label>
            <InputText id="username" @bind-Value="loginModel.Username" 
                autocomplete="off" spellcheck="false"
                class="shadow appearance-none border border-[#BAB2B5] rounded w-full py-2 px-3 text-[#123C69] leading-tight focus:outline-none focus:border-[#AC3B61] focus:ring-1 focus:ring-[#AC3B61] transition-all duration-200" />
        </div>

        <div class="flex items-center justify-between">
            <button type="submit" class="bg-[#AC3B61] hover:bg-[#C15B7B] text-white font-bold py-2 px-4 rounded focus:outline-none focus:ring-2 focus:ring-[#AC3B61] focus:ring-opacity-50 transition-colors duration-200">
                Login
            </button>
        </div>
    </EditForm>
</CompositeModal>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public EventCallback OnLoginSuccess { get; set; }

    private CreateUserDto loginModel = new CreateUserDto { Username = string.Empty };

    private async Task HandleLogin()
    {
        await UserService.LoginAsync(loginModel.Username);
        await IsVisibleChanged.InvokeAsync(false);
        await OnLoginSuccess.InvokeAsync();

        loginModel = new CreateUserDto { Username = string.Empty };
    }
}