@inject UserService UserService
@inject NavigationManager NavigationManager

<CompositeModal @bind-IsVisible="IsVisible" Title="User Profile">
    @if (UserService.CurrentUser != null)
    {
        <div class="font-secondary space-y-6">
            
            <div class="bg-[#EEE2DC] p-4 rounded-lg">
                <h3 class="text-lg font-semibold text-[#123C69] mb-2">Account Details</h3>
                <p class="text-[#123C69]"><span class="font-medium">Username:</span> @UserService.CurrentUser.Username</p>
                <p class="text-[#123C69]"><span class="font-medium">Create:</span> @UserService.CurrentUser.CreatedAt.ToShortDateString()</p>
            </div>
            
            <div class="flex justify-center">
                <button @onclick="HandleLogout" 
                    class="bg-[#AC3B61] hover:bg-[#C15B7B] text-white font-bold py-2 px-6 rounded-full focus:outline-none focus:ring-2 focus:ring-[#AC3B61] focus:ring-opacity-50 transition-colors duration-200">
                    Logout
                </button>
            </div>
        </div>
    }
</CompositeModal>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public EventCallback OnLogout { get; set; }

    private async Task HandleLogout()
    {
        UserService.Logout();
        await IsVisibleChanged.InvokeAsync(false);
        await OnLogout.InvokeAsync();
    }
}