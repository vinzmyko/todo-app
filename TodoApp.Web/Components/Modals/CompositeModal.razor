@if (IsVisible)
{
<div class="fixed inset-0 bg-black bg-opacity-50 z-40 flex justify-center items-center">  @* Drop shadow and center alignment *@
        <div class="bg-[#EEE2DC] p-6 rounded-lg shadow-xl z-50 max-w-md w-full font-secondary">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-bold text-[#123C69]">@Title</h2>
                <button @onclick="Close" class="text-[#AC3B61] hover:text-[#C15B7B] transition-colors duration-200">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            <div class="mb-4">
                @ChildContent
            </div>
        </div>
    </div>
}

@code 
{
    [Parameter] public bool IsVisible { get; set; }
    @* EventCallback's allow child components to communication events up to their parents without knowing what the parent will do with that information *@
    @* EventCallback where the child notifies the parent of an event. *@
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public string Title { get; set; } = "Modal";
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private Task Close()
    {
        @* The argument is based on the type parameter "<bool>" *@
        return IsVisibleChanged.InvokeAsync(false); @* Telling the parent component that visibility should change to false meaning close modal.*@
    }
}