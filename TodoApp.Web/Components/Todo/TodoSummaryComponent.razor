@using TodoApp.Web.Models

<div class="bg-[#EEE2DC] shadow-md rounded-lg p-4 mb-4 relative cursor-pointer hover:shadow-lg transition-shadow duration-200 font-secondary" @onclick="OnClick">
    <div class="flex justify-between items-start">
        <h3 class="text-lg font-semibold mb-2 text-[#123C69]">@Todo.Title</h3>
        @if (Todo.IsCompleted)
        {
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-[#AC3B61]" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
        }
        else
        {
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-[#EDC7B7]" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
        }
    </div>
    <p class="text-sm text-[#123C69] mt-2 opacity-80">Due: @(Todo.DueDate?.ToShortDateString() ?? "No due date")</p>
    @if (Todo.Tags != null && Todo.Tags.Any())
    {
        <div class="mt-2 flex flex-wrap">
            @foreach (var tag in Todo.Tags)
            {
                <span class="inline-block bg-[#BAB2B5] rounded-full px-2 py-1 text-xs font-semibold text-[#123C69] mr-1 mb-1">#@tag.Name</span>
            }
        </div>
    }
</div>

@code {
    [Parameter] public required TodoSummaryDto Todo { get; set; }
    [Parameter] public EventCallback<TodoSummaryDto> OnTodoClicked { get; set; }

    private async Task OnClick()
    {
        await OnTodoClicked.InvokeAsync(Todo);
    }
}