@inject TagsClient TagsClient

<div class="space-y-3 font-secondary">
    <div class="flex space-x-2">
        <input @bind="newTagName" @onkeyup="HandleKeyUp" 
               class="flex-grow rounded-md border-[#BAB2B5] shadow-sm focus:border-[#AC3B61] focus:ring focus:ring-[#AC3B61] focus:ring-opacity-50 transition-all duration-200 text-[#123C69]"
               placeholder="Enter a tag" />
        <button @onclick="AddTag" @onclick:preventDefault type="button" 
                class="px-4 py-2 bg-[#AC3B61] text-white rounded hover:bg-[#C15B7B] focus:outline-none focus:ring-2 focus:ring-[#AC3B61] focus:ring-opacity-50 transition-colors duration-200">
            Add
        </button>
    </div>
    <div class="flex flex-wrap gap-2">
        @foreach (var tag in Tags)
        {
            <div class="mt-4 font-accent bg-[#BAB2B5] rounded-full px-3 py-1 text-sm flex items-center text-[#123C69]">
                <span>#@tag</span>
                <button @onclick="() => RemoveTag(tag)" type="button" 
                        class="ml-2 text-[#AC3B61] text-[#C15B7B] focus:outline-none transition-colors duration-200">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public List<string> Tags { get; set; } = new();
    [Parameter] public EventCallback<List<string>> TagsChanged { get; set; }

    private string newTagName = string.Empty;

    private async Task AddTag()
    {
        if (!string.IsNullOrWhiteSpace(newTagName) && !Tags.Contains(newTagName))
        {
            Tags.Add(newTagName);
            await TagsChanged.InvokeAsync(Tags);
            newTagName = string.Empty;
        }
    }
    private async Task RemoveTag(string tag)
    {
        Tags.Remove(tag);
        await TagsChanged.InvokeAsync(Tags);
    }

    private async Task HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AddTag();
        }
    }
}